use std::{env, fs, path::Path, time::SystemTime};

use md5::compute;
use ureq::get;

fn main() {
	let dest_path = Path::new(&env!("CARGO_MANIFEST_DIR")).join("src").join("shopify_liquid_objects.rs");

	let should_update = if dest_path.exists() {
		let metadata = fs::metadata(&dest_path).unwrap();
		let modified = metadata.modified().unwrap();
		let age = SystemTime::now().duration_since(modified).unwrap();
		age.as_secs() > 86400 // 24 hours
	} else {
		true // File doesn't exist, create it
	};

	if !should_update {
		return;
	}

	let json_str = get("https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/data/objects.json")
		.call()
		.expect("Failed to fetch objects.json from GitHub")
		.body_mut()
		.read_to_string()
		.expect("Failed to read response");

	let objects: serde_json::Value = serde_json::from_str(&json_str).expect("Failed to parse JSON");

	let mut non_global_names = Vec::new();
	if let Some(array) = objects.as_array() {
		for obj in array {
			if obj["access"]["global"] == false {
				if let Some(name) = obj["name"].as_str() {
					non_global_names.push(name.to_string());
				}
			}
		}
	}

	// Sort for consistent output
	non_global_names.sort();

	let code = format!(
		"// AUTO-GENERATED FROM https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/data/objects.json\n// DO NOT EDIT THIS FILE MANUALLY\npub const SHOPIFY_ALLOWED_OBJECTS: &[&str] = &{:?};\n",
		non_global_names
	);

	let new_hash = format!("{:x}", compute(&code));
	let old_hash = format!("{:x}", compute(&fs::read_to_string(&dest_path).unwrap_or_default()));

	if new_hash != old_hash {
		println!("cargo:warning=objects.json has changed, regenerating...");
		println!("cargo:rerun-if-env-changed=FORCE_REBUILD");
		fs::write(&dest_path, code).unwrap();
	}
}
