use std::{env, fs, path::Path, time::Duration};
use ureq::Agent;

fn main() {
	let dest_path = Path::new(&env!("CARGO_MANIFEST_DIR"))
		.parent()
		.expect("Failed to find the root directory")
		.join("src")
		.join("shopify_liquid_objects.rs");

	let config = Agent::config_builder().timeout_global(Some(Duration::from_secs(30))).build();
	let agent: Agent = config.into();

	let json_str = agent
		.get("https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/data/objects.json")
		.header("User-Agent", "shopify-objects-updater (+https://github.com/the-working-party/liquid-docs)")
		.header("Accept", "application/json")
		.call()
		.expect("Failed to fetch objects.json from GitHub")
		.body_mut()
		.read_to_string()
		.expect("Failed to read response");

	let objects: serde_json::Value = serde_json::from_str(&json_str).expect("Failed to parse JSON");

	let mut non_global_names = Vec::new();
	if let Some(array) = objects.as_array() {
		for obj in array {
			if obj.get("access").and_then(|a| a.get("global")).and_then(|g| g.as_bool()) == Some(false)
				&& let Some(name) = obj.get("name").and_then(|n| n.as_str())
			{
				non_global_names.push(name.to_string());
			}
		}
	}

	// Sort and deduplicate for consistent output
	non_global_names.sort();
	non_global_names.dedup();

	let new_file = format!(
		"// AUTO-GENERATED FROM https://raw.githubusercontent.com/Shopify/theme-liquid-docs/main/data/objects.json\n// DO NOT EDIT THIS FILE MANUALLY\npub const SHOPIFY_ALLOWED_OBJECTS: &[&str] = &{:?};\n",
		non_global_names
	);
	let old_file = fs::read_to_string(&dest_path).unwrap_or_default();

	if new_file != old_file {
		println!("Changes detected in \"shopify_liquid_objects.rs\", regenerating...");
		fs::write(&dest_path, new_file).expect("Failed to write to file");
	} else {
		println!("No changes detected in \"shopify_liquid_objects.rs\", skipping regeneration.");
	}
}
